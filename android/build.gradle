apply plugin: 'android'
android {
  buildToolsVersion '23.0.3'
  compileSdkVersion 23
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      aidl.srcDirs = ['src/main/java']
      renderscript.srcDirs = ['src/main/java']
      res.srcDirs = ['res']
      assets.srcDirs = ['../assets']
      jniLibs.srcDirs = ['libs']
    }

    instrumentTest.setRoot('tests')
  }
  packagingOptions {
    // Preventing from license violations (more or less):
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/license.txt'
    pickFirst 'META-INF/LGPL2.1'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/notice.txt'
    // Excluding unnecessary meta-data:
    exclude 'META-INF/robovm/ios/robovm.xml'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies.txt'
  }
  defaultConfig {
    applicationId 'de.macbury'
    minSdkVersion 8
    targetSdkVersion 23
  }
}

configurations { natives }

dependencies {
  compile project(':core')
  compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
  file("libs/armeabi/").mkdirs();
  file("libs/armeabi-v7a/").mkdirs();
  file("libs/arm64-v8a/").mkdirs();
  file("libs/x86_64/").mkdirs();
  file("libs/x86/").mkdirs();

  configurations.natives.files.each { jar ->
    def outputDir = null
    if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
    if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
    if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
    if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
    if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
    if(outputDir != null) {
      copy {
        from zipTree(jar)
        into outputDir
        include "*.so"
      }
    }
  }
}

task run(type: Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = '$System.env.ANDROID_HOME'
    }
  } else {
    path = '$System.env.ANDROID_HOME'
  }

  def adb = path + "/platform-tools/adb"
  commandLine '$adb', 'shell', 'am', 'start', '-n', 'de.macbury/de.macbury.android.AndroidLauncher'
}

// Sets up the Android Eclipse project using the old Ant based build.
eclipse {
  // needs to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
  // ignores any nodes added in classpath.file.withXml
  sourceSets {
    main {
      java.srcDirs 'src/main/java', 'gen'
    }
  }

  jdt {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
  }

  classpath {
    plusConfigurations += [ project.configurations.compile ]
    containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
  }

  project {
    name = appName + "-android"
    natures 'com.android.ide.eclipse.adt.AndroidNature'
    buildCommands.clear();
    buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
    buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
    buildCommand "org.eclipse.jdt.core.javabuilder"
    buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
  }
}

// Sets up the Android Idea project using the old Ant based build.
idea {
  module {
    sourceDirs += file("src/main/java");
    scopes = [ COMPILE: [plus:[project.configurations.compile]]]
    iml {
      withXml {
        def node = it.asNode()
        def builder = NodeBuilder.newInstance();
        builder.current = node;
        builder.component(name: "FacetManager") {
          facet(type: "android", name: "Android") {
            configuration {
              option(name: "UPDATE_PROPERTY_FILES", value:"true")
            }
          }
        }
      }
    }
  }
}
